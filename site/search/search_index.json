{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenBubi Open-source module for the Hungarian bike-rental system, MOL Bubi Why OpenBubi? OpenBubi is a really nice solution, and it is easy to integrate There are some use cases: You can make a smart-watch app, that can be used to rent bikes You can redesign the MOL Bubi web app You can make a data analyzing algorithm for MOL Bubi routes (a couple of Hungarians have already done this , but they would have had an easier time with OpenBubi :D) You can make a smart assistant that can calculate the path to the nearest MOL Bubi station, and then rent a bike on that station. You can make a MOL Bubi client with a TUI (Text User Interface), or a CLI (Command Line Interface) Get started To get started, view this guide","title":"Home"},{"location":"#openbubi","text":"","title":"OpenBubi"},{"location":"#open-source-module-for-the-hungarian-bike-rental-system-mol-bubi","text":"","title":" Open-source module for the Hungarian bike-rental system, MOL Bubi"},{"location":"#why-openbubi","text":"OpenBubi is a really nice solution, and it is easy to integrate There are some use cases: You can make a smart-watch app, that can be used to rent bikes You can redesign the MOL Bubi web app You can make a data analyzing algorithm for MOL Bubi routes (a couple of Hungarians have already done this , but they would have had an easier time with OpenBubi :D) You can make a smart assistant that can calculate the path to the nearest MOL Bubi station, and then rent a bike on that station. You can make a MOL Bubi client with a TUI (Text User Interface), or a CLI (Command Line Interface)","title":"Why OpenBubi?"},{"location":"#get-started","text":"To get started, view this guide","title":"Get started"},{"location":"about/","text":"About Thanks for the help, Br\u00fan\u00f3 Salomon","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#thanks-for-the-help-bruno-salomon","text":"","title":"Thanks for the help, Br\u00fan\u00f3 Salomon"},{"location":"getting-started/","text":"Getting started","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"installation/","text":"Installation Open up a terminal Clone the repository of the source code git clone https://github.com/piciakk/OpenBubi Install the requirements Manually pip install requests geopy Automatically pip install -r requirements.txt","title":"Installation"},{"location":"installation/#installation","text":"Open up a terminal Clone the repository of the source code git clone https://github.com/piciakk/OpenBubi Install the requirements Manually pip install requests geopy Automatically pip install -r requirements.txt","title":"Installation"},{"location":"notes/","text":"Reverse engineering notes https://futar.bkk.hu/api/query/v1/ws/otp/api/where/bicycle-rental.json?key=bkk-web&version=4 https://futar.bkk.hu/api/query/v1/ws/otp/api/where/bicycle-rental.json?key=bkk-web&version=4&appVersion=3.13.0-58029-74e31c4b https://api-budapest.nextbike.net/maps/nextbike-live.json?domains=bh https://api-budapest.nextbike.net/maps/nextbike-live.flatjson?domains=bh https://api-budapest.nextbike.net/maps/nextbike-official.json?domains=bh curl -X POST -F 'mobile=xxx' -F 'pin=xxx' -F 'apikey=Bbx3nGP291xEtDmq' -F 'show_errors=1' -F 'domain=bh' https://api-budapest.nextbike.net/api/v1.1/login.json https://github.com/h0chi/nextbike-api-reverse-engineering","title":"Reverse-engineering notes"},{"location":"notes/#reverse-engineering-notes","text":"","title":"Reverse engineering notes"},{"location":"notes/#httpsfutarbkkhuapiqueryv1wsotpapiwherebicycle-rentaljsonkeybkk-webversion4","text":"","title":"https://futar.bkk.hu/api/query/v1/ws/otp/api/where/bicycle-rental.json?key=bkk-web&amp;version=4"},{"location":"notes/#httpsfutarbkkhuapiqueryv1wsotpapiwherebicycle-rentaljsonkeybkk-webversion4appversion3130-58029-74e31c4b","text":"","title":"https://futar.bkk.hu/api/query/v1/ws/otp/api/where/bicycle-rental.json?key=bkk-web&amp;version=4&amp;appVersion=3.13.0-58029-74e31c4b"},{"location":"notes/#httpsapi-budapestnextbikenetmapsnextbike-livejsondomainsbh","text":"","title":"https://api-budapest.nextbike.net/maps/nextbike-live.json?domains=bh"},{"location":"notes/#httpsapi-budapestnextbikenetmapsnextbike-liveflatjsondomainsbh","text":"","title":"https://api-budapest.nextbike.net/maps/nextbike-live.flatjson?domains=bh"},{"location":"notes/#httpsapi-budapestnextbikenetmapsnextbike-officialjsondomainsbh","text":"","title":"https://api-budapest.nextbike.net/maps/nextbike-official.json?domains=bh"},{"location":"notes/#curl-x-post-f-mobilexxx-f-pinxxx-f-apikeybbx3ngp291xetdmq-f-show_errors1-f-domainbh-httpsapi-budapestnextbikenetapiv11loginjson","text":"","title":"curl -X POST -F 'mobile=xxx' -F 'pin=xxx' -F 'apikey=Bbx3nGP291xEtDmq' -F 'show_errors=1' -F 'domain=bh' https://api-budapest.nextbike.net/api/v1.1/login.json"},{"location":"notes/#httpsgithubcomh0chinextbike-api-reverse-engineering","text":"","title":"https://github.com/h0chi/nextbike-api-reverse-engineering"},{"location":"usage/gui/","text":"Try it out using a fancy GUI Note: On Ubuntu, you can get a dependency error, (about tkinter ) when you're trying to run the GUI. If this is the case, run make , or (manually) sudo apt install python3-tk . (I don't know if this error is present in other distros -> try it for yourself, and maybe start a Pull Request about it) Start the GUI python ./gui/login.py Enter your MOL Bubi credentials Enjoy the experience :D","title":"Try it out using a fancy GUI"},{"location":"usage/gui/#try-it-out-using-a-fancy-gui","text":"Note: On Ubuntu, you can get a dependency error, (about tkinter ) when you're trying to run the GUI. If this is the case, run make , or (manually) sudo apt install python3-tk . (I don't know if this error is present in other distros -> try it for yourself, and maybe start a Pull Request about it) Start the GUI python ./gui/login.py Enter your MOL Bubi credentials Enjoy the experience :D","title":"Try it out using a fancy GUI"},{"location":"usage/pymodule/functions/","text":"Built-in functions of the Python module BubiUser(phoneNumber, pin) info() - returns information in JSON (not dictionary) format -> if you want it in dictionary format, import json , and use json.loads(info()) getScreenName() - grabs the screen name from info() , and returns it getLoginKey() - grabs the login key from info() , and returns it callOtherEndpoint(relativeURL, data) ( relativeURL needs to be a string, and data needs to be a dictionary ) - calls the specified endpoint with the specified data (plus loginkey , domain , apikey , show_errors ), and returns the output. ( you can find endpoints here ) rentBike(bikeNumber) ( bikeNumber needs to be a string ) - rents a bike, and returns the output getRentals() - returns information about the user's rentals getClosedRentals() - returns closed rentals from getRentals() getActiveRentals() - returns active rentals getPaymentLinks() - returns information about payment links getSubscriptionInfo() - returns the end of the subscription, and the type of the subscription getSubScriptionType() - returns the type of the subscription based on getSubscriptionInfo() (monthly, or annual) getEndOfSubscription() - returns the end of the subscription based on getSubscriptionInfo() (date) moreInfo() - returns a LOT of information about the user getRentalDetails() - returns information about the current rental register() - Work in progress... BubiMap() listAllStations() - returns a JSON object containing all stations listAllBikes() - returns a JSON object containing all bikes listAllBikesFormatted() - returns a JSON object containing all bikes (without the unnecessary parts) listAllStationsFormatted() - returns a JSON object containing all stations (without the unnecessary parts) getNearestStation(lat, lon) - ( lat, and lon needs to be a string ) returns the nearest station's name by latitude, and longitude (Using the Pythagorean theorem) getNearestStationByAddress(address) - returns the nearest station's name by address (using getNearestStation() , and OpenStreetMap API) listAllBikesOnStations(stationName) - returns all the bikes on a station (and the number of these bikes, and information about these bikes) countBikesOnStation(stationName) - counts all the bikes on a station (using listAllBikesOnStation() ), and returns the counter getCoordinateOfStation(stationName) - returns the coordinates of a station (latitude, longitude)","title":"Built-in functions of the Python module"},{"location":"usage/pymodule/functions/#built-in-functions-of-the-python-module","text":"","title":"Built-in functions of the Python module"},{"location":"usage/pymodule/functions/#bubiuserphonenumber-pin","text":"info() - returns information in JSON (not dictionary) format -> if you want it in dictionary format, import json , and use json.loads(info()) getScreenName() - grabs the screen name from info() , and returns it getLoginKey() - grabs the login key from info() , and returns it callOtherEndpoint(relativeURL, data) ( relativeURL needs to be a string, and data needs to be a dictionary ) - calls the specified endpoint with the specified data (plus loginkey , domain , apikey , show_errors ), and returns the output. ( you can find endpoints here ) rentBike(bikeNumber) ( bikeNumber needs to be a string ) - rents a bike, and returns the output getRentals() - returns information about the user's rentals getClosedRentals() - returns closed rentals from getRentals() getActiveRentals() - returns active rentals getPaymentLinks() - returns information about payment links getSubscriptionInfo() - returns the end of the subscription, and the type of the subscription getSubScriptionType() - returns the type of the subscription based on getSubscriptionInfo() (monthly, or annual) getEndOfSubscription() - returns the end of the subscription based on getSubscriptionInfo() (date) moreInfo() - returns a LOT of information about the user getRentalDetails() - returns information about the current rental register() - Work in progress...","title":"BubiUser(phoneNumber, pin)"},{"location":"usage/pymodule/functions/#bubimap","text":"listAllStations() - returns a JSON object containing all stations listAllBikes() - returns a JSON object containing all bikes listAllBikesFormatted() - returns a JSON object containing all bikes (without the unnecessary parts) listAllStationsFormatted() - returns a JSON object containing all stations (without the unnecessary parts) getNearestStation(lat, lon) - ( lat, and lon needs to be a string ) returns the nearest station's name by latitude, and longitude (Using the Pythagorean theorem) getNearestStationByAddress(address) - returns the nearest station's name by address (using getNearestStation() , and OpenStreetMap API) listAllBikesOnStations(stationName) - returns all the bikes on a station (and the number of these bikes, and information about these bikes) countBikesOnStation(stationName) - counts all the bikes on a station (using listAllBikesOnStation() ), and returns the counter getCoordinateOfStation(stationName) - returns the coordinates of a station (latitude, longitude)","title":"BubiMap()"},{"location":"usage/pymodule/overview/","text":"Overview of the Python module There you can find a simple guide for using the module. There are two classes: BubiUser , and BubiMap . In this tutorial, I'll use these classes. First of all, make a new Python script, that is in the same directory as openbubi.py Then import the module import openbubi Then make a new instance of the BubiUser , and the BubiMap class # making a BubiUser instance (this takes two arguments) testUser = openbubi . BubiUser ( \"phoneNumber\" , \"pin\" ) # Making a BubiMap instance (this takes no argument) testMap = openbubi . BubiMap () Then print the name of the testUser user print ( testUser . getScreenName ()) With these simple steps, we can make a program that takes a phone number, a pin, and prints out a name import openbubi import getpass phoneNumber = getpass . getpass ( \"Please enter your phone number: \" ) pin = getpass . getpass ( \"Please enter your pin: \" ) user = openbubi . BubiUser ( phoneNumber , pin ) print ( user . getScreenName ()) Run the program Output: Congratulations! You've made your first OpenBubi program! \ud83c\udf89 You can read a more technical documentation about the built-in functions here .","title":"Overview of the Python module"},{"location":"usage/pymodule/overview/#overview-of-the-python-module","text":"There you can find a simple guide for using the module. There are two classes: BubiUser , and BubiMap . In this tutorial, I'll use these classes. First of all, make a new Python script, that is in the same directory as openbubi.py Then import the module import openbubi Then make a new instance of the BubiUser , and the BubiMap class # making a BubiUser instance (this takes two arguments) testUser = openbubi . BubiUser ( \"phoneNumber\" , \"pin\" ) # Making a BubiMap instance (this takes no argument) testMap = openbubi . BubiMap () Then print the name of the testUser user print ( testUser . getScreenName ()) With these simple steps, we can make a program that takes a phone number, a pin, and prints out a name import openbubi import getpass phoneNumber = getpass . getpass ( \"Please enter your phone number: \" ) pin = getpass . getpass ( \"Please enter your pin: \" ) user = openbubi . BubiUser ( phoneNumber , pin ) print ( user . getScreenName ()) Run the program Output: Congratulations! You've made your first OpenBubi program! \ud83c\udf89 You can read a more technical documentation about the built-in functions here .","title":"Overview of the Python module"}]}